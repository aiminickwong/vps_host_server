#!/usr/bin/expect -f

# This Expect script was generated by autoexpect on Thu Nov 12 12:06:50 2015
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
send -- "perl -MCPAN -e shell\r"
expect "Are you ready for manual configuration?"
send -- "yes\r"
expect "CPAN build and cache directory?"
send -- "\r"
expect "Cache size for build directory"
send -- "\r"
expect "Perform cache scanning"
send -- "\r"
expect "Cache metadata"
send -- "yes\r"
expect "Your terminal expects ISO-8859-1"
send -- "yes\r"
expect "File to save your history"
send -- "\r"
expect "Number of lines to save"
send -- "\r"
expect "Policy on building prerequisites"
send -- "\r"
expect "Where is your gzip program"
send -- "\r"
expect "Where is your tar program"
send -- "\r"
expect "Where is your unzip program"
send -- "\r"
expect "Where is your make program"
send -- "\r"
expect "Where is your links program"
send -- "\r"
expect "Where is your wget program"
send -- "\r"
expect "Where is your ncftpget program"
send -- "\r"
expect "Where is your ncftp program"
send -- "\r"
expect "Where is your ftp program"
send -- "\r"
expect "Where is your gpg program"
send -- "\r"
expect "What is your favorite pager program"
send -- "\r"
expect "What is your favorite shell"
send -- "\r"
expect "Your choice"
send -- "\r"
expect "Your choice"
send -- "\r"
expect "Your choice"
send -- "\r"
expect "Timeout for inactivity during Makefile.PL"
send -- "\r"
expect "Your ftp_proxy"
send -- "\r"
expect "Your http_proxy"
send -- "\r"
expect "Your no_proxy"
send -- "\r"
expect "Shall I use the local database"
send -- "y\r"
expect "Select your continent"
send -- "4\r"
expect "Select your country"
send -- "4\r"
expect "Select as many URLs"
send -- "1 4 5\r"
expect "Enter another URL or RETURN to quit"
send -- "\r"
expect "cpan>"
send -- "o conf commit\r"
expect "cpan>"
send -- "quit\r"
send -- "exit\r"
expect eof
