description "libvirt daemon"
author "Joe Huss <detain@interserver.net>"
# Original file by author "Dustin Kirkland <kirkland@canonical.com>"
# This is a modification of the Ubuntu default file adding support for
# saving VMs to disk on shutdown and restoring them on bootup

start on stopped rc RUNLEVEL=[2345]
stop on starting rc RUNLEVEL=[016]

expect daemon
respawn

# 1(enable)/0(disable) suspend to disk
env libvirt_suspend_on_reboot="1"
env libvirt_suspenddir="/var/lib/libvirt/autosuspend"
env LANG=C
# daemonize
env libvirtd_opts="-d"
# whether libvirtd should run at boot/shutdown
env start_libvirtd="yes"
# by default wait 30 seconds for vms to shut down
env libvirtd_shutdown_timeout=30
# uris for which to shut down vms
env libvirt_uris='qemu:///system lxc:/// xen:///'

pre-start script
	[ -r /etc/default/libvirt-bin ] && . /etc/default/libvirt-bin
	[ ! "x$start_libvirtd" = "xyes" ] && { stop; exit 0; }
	mkdir -p /var/run/libvirt
	# Clean up a pidfile that might be left around
	rm -f /var/run/libvirtd.pid
end script

post-start script
	[ -r /etc/default/libvirt-bin ] && . /etc/default/libvirt-bin

	log_msg()
	{
		logf="/var/log/libvirt/shutdownlog.log"
		logger -p daemon.debug -s -t libvirt -- "$@" >> $logf 2>&1
	}

	run_virsh()
	{
		# We parse the output for things like domain state;
		# make sure the output is in the language we expect.
		LANG=C virsh "$@" 2>/dev/null
	}

	if [ -z "$RUNLEVEL" ]; then
		exit 0
	fi

	if [ "$RUNLEVEL" -ne 0 ] && [ "$RUNLEVEL" -ne 1 ] && [ "$RUNLEVEL" -ne 6 ]; then
		exit 0
	fi
	log_msg "libvirt-bin: entering post-start at $(date)"

        log_msg "Checking Libvirt"
	slept=0
	while [ ! -e /var/run/libvirt/libvirt-sock ] && [ $slept -lt 120 ]; do
		if [ "$(pidof libvirtd 2>/dev/null)" = "" ]; then
			log_msg"Starting missing libvirtd"
			exec /usr/sbin/libvirtd $libvirtd_opts
		fi;
		sleep 3s;
		slept=$(($slept + 3))
	fi;

        for uri in $libvirt_uris; do
                if [ "${libvirt_suspend_on_reboot}" = "1" ] && [ "$uri" != "lxc:///" ]; then
                        log_msg "libvirt-bin: resuming vps's from disk at $(date)"
                        for domain in ${libvirt_suspenddir}/*dump; do
                                if [ -f $domain ]; then
                                        if [ "$(virsh -c "$uri" list | awk '$3 == "running" {print $2}' | grep "$(basename $domain .dump)$")" != "" ]; then
                                                log_msg "libvirt-bin: killing off unwanted started $(basename $domain .dump) at $(date)"
                                                virsh -c "$uri" destroy $(basename $domain .dump)
                                        fi;
                                        log_msg "libvirt-bin: restoring from disk $(basename $domain .dump) at $(date)"
                                        virsh -c "$uri" restore --file "$domain" && rm -f "$domain"
                                        log_msg "libvirt-bin: enabling autostart on $(basename $domain .dump) at $(date)"
                                        virsh -c "$uri" autostart $(basename $domain .dump)
                                fi
                        done
		else
			log_msg "libvirt-bin: no vps to resume or suspend disabled at $(date)"
                fi  
        done
	log_msg "libvirt-bin: exiting post-start at $(date)"
end script

pre-stop script
	[ -r /etc/default/libvirt-bin ] && . /etc/default/libvirt-bin

	log_msg()
	{
		logf="/var/log/libvirt/shutdownlog.log"
		logger -p daemon.debug -s -t libvirt -- "$@" >> $logf 2>&1
	}

	run_virsh()
	{
		# We parse the output for things like domain state;
		# make sure the output is in the language we expect.
		LANG=C virsh "$@" 2>/dev/null
	}

	if [ -z "$RUNLEVEL" ]; then
		exit 0
	fi

	if [ "$RUNLEVEL" -ne 0 ] && [ "$RUNLEVEL" -ne 1 ] && [ "$RUNLEVEL" -ne 6 ]; then
		exit 0
	fi
	log_msg "libvirt-bin: entering pre-stop at $(date)"

        if [ "${libvirt_suspend_on_reboot}" = "1" ]; then
                log_msg "libvirt-bin: suspending vps's to disk"
                for uri in $libvirt_uris; do
                        if [ "$uri" != "lxc:///" ]; then
                                # This code here basically sorts all the processes by resource usage and stops them first, huge improvement
                                for domain in $(top -b -c -n 1|grep "qemu.*-name "|sed s#"^.* -name \([a-z0-9]*\) .*$"#"\1"#g); do
                                        log_msg "libvirt-bin: saving to disk $domain at $(date)"
                                        virsh -c "$uri" autostart $domain --disable
                                        virsh -c "$uri" save "${domain}" "${libvirt_suspenddir}/${domain}.dump"
                                done
                                for domain in $(run_virsh -c "$uri" list | awk '$3 == "running" {print $2}'); do
                                        log_msg "libvirt-bin: saving to disk $domain at $(date)"
                                        virsh -c "$uri" autostart $domain --disable
                                        virsh -c "$uri" save "${domain}" "${libvirt_suspenddir}/${domain}.dump"
                                done
                        fi
                done
        fi
	for uri in $libvirt_uris; do
		for domain in $(run_virsh -c "$uri" list | awk '$3 == "running" {print $2}'); do
			log_msg "libvirt-bin: attempting clean shutdown of $domain at $(date)"
			run_virsh -c "$uri" shutdown "$domain" >/dev/null
		done
	done

	delay=$libvirtd_shutdown_timeout
	while [ $delay -gt 0 ]; do
		for uri in $libvirt_uris; do
			if ! run_virsh -c "$uri" list | awk '$3 == "running" {exit 1}'; then
				# VMs at this URI are still running. Wait, then
				# start at the beginning looking for running VMs.
				sleep 1
				delay=$(($delay - 1))
				continue 2
			fi
		done
		break
	done

	for uri in $libvirt_uris; do
		for domain in $(run_virsh -c "$uri" list | awk '$3 == "running" {print $2}'); do
			log_msg "destroying $domain"
			run_virsh -c "$uri" destroy "$domain" >/dev/null
		done
	done
	log_msg "libvirt-bin: exiting pre-stop at $(date)"
end script

# /etc/default/libvirt-bin will be deprecated soon.
# If you used to set $libvirtd_opts in /etc/default/libvirt-bin,
# change the 'exec' line here instead.
script
	[ -r /etc/default/libvirt-bin ] && . /etc/default/libvirt-bin
	exec /usr/sbin/libvirtd $libvirtd_opts
end script
